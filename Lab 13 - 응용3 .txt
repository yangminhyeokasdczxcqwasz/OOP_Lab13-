//Lab 13 - 응용3 
string begin end 
begin 의 경우 -> 처음 시작하는 문자열의 위치의 포인터를 반환
end 의 경우 -> 문자열의 마지막 위치의 다음 주소의 포인터를 반환 
즉 문자열이 위치하는 것은 begin ~ end-1 까지가 string이 저장되어 있는 것. 

iterator -> 이용해서 for문을 사용하기 위해서는 먼저 auto 변수를 사용해야 한다. 

<순행 순서>
for(auto cursor = iter_begin; cursor != iter_end; cursor++) 

<역순>
for(auto cursor = iter_end-1; cursor != iter_begin-1; cursor--) 임을 알 수 있음. 

그리고 출력을 할 때는 포인터로 반환하였으므로 *로 출력을 해줘야 함. 

string reverse_string(string word) {
	auto word_begin = word.begin(); 
	auto word_end = word.end(); 
	string result = "";
	for (auto iter = word_end-1; iter != word_begin-1 ; iter--) {
		result += *iter; 
	}
	return result; 
}

이렇게 코드를 짰는데 자꾸 cannot seek string iterator before begin 라는 에러가 발생했음. 
이유가 머지?? 
for (auto iter = word_end-1; iter != word_begin-1 ; iter--) -> 이거 자체가 문법이 틀렸나? 틀렸음. 
string reverse_string(string word) {
	auto word_begin = word.begin();
	auto word_end = word.end();
	string result = "";
	for (auto iter = word_end - 1; iter != word_begin; iter--) {
		result += *iter;
	}
	result += word[0]; 
	return result;
} 이렇게 코드를 마무리 지었고 

람다 함수를 통해서 똑같은 동작을 구현 
//if (word == rev_str) cout << "이 문자는 회문입니다." << '\n' << endl; 
//else cout << "이 문자는 회문이 아닙니다. " << '\n' << endl;

[](string word1, string word2) {if (word1 == word2) cout << "이 문장은 회문입니다." << '\n' 
<< endl; else cout << "이 문자는 회문이 아닙니다. " << '\n' << endl; }(word, rev_str); 
람다함수의 특성은 만들고 바로 함수를 실행할 수 있다는 것이다. 


코드 완성본 
